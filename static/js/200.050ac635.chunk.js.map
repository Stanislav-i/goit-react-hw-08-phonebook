{"version":3,"file":"static/js/200.050ac635.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactsForm/ContactsForm.module.css?d5f2","components/ContactsForm/ContactsForm.jsx","webpack://react-homework-template/./src/Pages/Contacts/ContactsPage.module.css?10d9","components/ContactsList/ContactList.module.css","webpack://react-homework-template/./src/components/ContactsList/Contact.module.css?b81e","webpack://react-homework-template/./src/components/EditContactForm/EditContactForm.module.css?43d2","components/EditContactForm/EditContactForm.jsx","webpack://react-homework-template/./src/components/ModalEditContact/ModalEditContact.module.css?e6a1","components/ModalEditContact/ModalEditContact.jsx","components/ContactsList/Contact.jsx","components/ContactsList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","Pages/Contacts/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formstyle\":\"ContactsForm_formstyle__Yvl2D\",\"inputstyle\":\"ContactsForm_inputstyle__IEoPR\",\"inputname\":\"ContactsForm_inputname__oGNP1\",\"button\":\"ContactsForm_button__zuUB3\"};","import { useDispatch, useSelector } from 'react-redux';\nimport css from './ContactsForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { addContactThunk, selectUserContacts } from 'redux/contactsReducer';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectUserContacts);\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    if (\n      contacts.some(\n        contact => contact.name.toLocaleLowerCase() === name.toLocaleLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n    } else {\n      dispatch(addContactThunk({ name: name, number: number }));\n    }\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.formstyle}>\n      <label htmlFor={nameInputId} className={css.inputname}>\n        Name\n      </label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        className={css.inputstyle}\n        // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        id={nameInputId}\n        required\n      />\n\n      <label htmlFor={numberInputId} className={css.inputname}>\n        Number\n      </label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        className={css.inputstyle}\n        // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        id={numberInputId}\n        required\n      />\n\n      <button type=\"submit\" className={css.button}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"ContactsContainer\":\"ContactsPage_ContactsContainer__ZWs4T\"};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"contactcontainer\":\"Contact_contactcontainer__5tXxP\",\"info\":\"Contact_info__CShPG\",\"contactInfo\":\"Contact_contactInfo__DB2xI\",\"contactButtons\":\"Contact_contactButtons__0lRS4\",\"button\":\"Contact_button__YLSCl\"};","// extracted by mini-css-extract-plugin\nexport default {\"formstyle\":\"EditContactForm_formstyle__9XZ9v\",\"inputstyle\":\"EditContactForm_inputstyle__DH66l\",\"inputname\":\"EditContactForm_inputname__kuY0g\",\"button\":\"EditContactForm_button__6oq3H\"};","import { useDispatch, useSelector } from 'react-redux';\nimport css from './EditContactForm.module.css'\nimport { nanoid } from 'nanoid';\nimport {editContactThunk, selectUserContacts } from 'redux/contactsReducer';\nimport { selectEditContactData, setEditContactData, setModalStatus } from 'redux/modalSlice';\n\nexport const EditContactForm = () => {\n  const contacts = useSelector(selectUserContacts);\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n  const {name, number, id} = useSelector(selectEditContactData);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const newName = form.elements.name.value;\n    const newNumber = form.elements.number.value;\n\n    if (\n      contacts.some(\n        contact => contact.name.toLocaleLowerCase() === newName.toLocaleLowerCase()\n      )\n    ) {\n      alert(`${newName} is already in contacts`);\n    } else {\n      dispatch(editContactThunk({ id: id, newContactData: {\n        name: newName,\n        number: newNumber,\n      } }));\n      dispatch(setModalStatus(false));\n      dispatch(setEditContactData(null));\n    }\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.formstyle}>\n      <label htmlFor={nameInputId} className={css.inputname}>\n        New Name\n      </label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        defaultValue={name}\n        className={css.inputstyle}\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        id={nameInputId}\n        required\n      />\n\n      <label htmlFor={numberInputId} className={css.inputname}>\n       New Number\n      </label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        defaultValue={number}\n        className={css.inputstyle}\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        id={numberInputId}\n        required\n      />\n\n      <button type=\"submit\" className={css.button}>\n        Edit contact\n      </button>\n    </form>\n  );\n};\n\nexport default EditContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"backdrop\":\"ModalEditContact_backdrop__+40sC\",\"modal\":\"ModalEditContact_modal__ag524\",\"text\":\"ModalEditContact_text__aePtk\",\"closeButton\":\"ModalEditContact_closeButton__HXeLp\"};","import EditContactForm from 'components/EditContactForm/EditContactForm';\nimport css from './ModalEditContact.module.css';\nimport { useDispatch } from 'react-redux';\nimport { setEditContactData, setModalStatus } from 'redux/modalSlice';\nimport { useEffect } from 'react';\n\nexport const ModalEditContact = () => {\n  const dispatch = useDispatch();\n\n  const onCloseBtnClick = () => {\n    dispatch(setModalStatus(false));\n    dispatch(setEditContactData(null));\n  }\n\n    const handleOverlayClick = event => {\n        if (event.currentTarget === event.target) {\n            dispatch(setModalStatus(false));\n            dispatch(setEditContactData(null));\n        }\n      };\n    \n      useEffect(() => {\n        const handleKeyDown = event => {\n          if (event.code === 'Escape') {\n            dispatch(setModalStatus(false));\n            dispatch(setEditContactData(null));\n          }\n        };\n    \n        window.addEventListener('keydown', handleKeyDown);\n        return () => {\n          window.removeEventListener('keydown', handleKeyDown);\n        };\n      });\n    \n    return <div className={css.backdrop} onClick={handleOverlayClick}>\n        <div className={css.modal}>\n            <p className={css.text}>You are trying to change the next contact:</p>\n            <button className={css.closeButton} onClick={onCloseBtnClick}>&times;</button>\n            <EditContactForm />\n        </div>\n    </div>\n}\n\nexport default ModalEditContact;","import PropTypes from 'prop-types';\nimport css from './Contact.module.css';\nimport { MdContactPhone } from 'react-icons/md';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContactThunk } from 'redux/contactsReducer';\nimport { setEditContactData, setModalStatus } from 'redux/modalSlice';\nimport { selectModalStatus } from 'redux/modalSlice';\nimport {ModalEditContact} from 'components/ModalEditContact/ModalEditContact';\nimport { useEffect } from 'react';\n\nexport const Contact = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  const isModalOpen = useSelector(selectModalStatus);\n\n  const onEditBtnClick = () => {\n    dispatch(setModalStatus(true));\n    dispatch(setEditContactData({ name, number, id }));\n  }\n\n  useEffect(()=>{\n\n  }, [])\n\n  return (\n    \n    <div className={css.contactcontainer}>\n      {isModalOpen && <ModalEditContact />}\n      <div className={css.contactInfo}>\n        <MdContactPhone />\n        <p className={css.info}>\n          {name}: {number}\n        </p>\n      </div>\n      <div className={css.contactButtons}>\n        <button\n          type=\"button\"\n          onClick={() => dispatch(deleteContactThunk(id))}\n          className={css.button}\n        >\n          Delete\n        </button>\n        <button\n          type=\"button\"\n          onClick={onEditBtnClick}\n          className={css.button}\n        >\n          Edit\n        </button>\n      </div>\n    </div>\n  );\n};\n\nContact.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n  id: PropTypes.string,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport css from './ContactList.module.css';\nimport {\n  requestContactsThunk,\n  selectContactsError,\n  selectContactsIsLoading,\n  selectUserContacts,\n} from 'redux/contactsReducer';\nimport { selectAuthentificated } from 'redux/authReducer';\nimport { useEffect } from 'react';\nimport Loader from 'components/Loader/Loader';\nimport { selectFilter } from 'redux/filterSlice';\nimport { Contact } from './Contact';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectUserContacts);\n  const authintificated = useSelector(selectAuthentificated);\n  const isLoading = useSelector(selectContactsIsLoading);\n  const error = useSelector(selectContactsError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!authintificated) return;\n\n    dispatch(requestContactsThunk());\n  }, [authintificated, dispatch]);\n\n  const filter = useSelector(selectFilter);\n\n  const getFilteredContacts = () => {\n    const normalizedFilter = filter.toLocaleLowerCase();\n    return contacts?.filter(contact =>\n      contact.name.toLocaleLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const showContacts = Array.isArray(contacts) && contacts.length > 0;\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error && <p>Error occured... Error is {error}</p>}\n\n      <ul className={css.liststyle}>\n        {showContacts &&\n          getFilteredContacts().map(({ id, name, number }) => (\n            <li key={id}>\n              <Contact name={name} number={number} id={id} />\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filtercontainer\":\"Filter_filtercontainer__t-IOk\"};","import css from './Filter.module.css';\nimport { setFilterValue, selectFilter } from 'redux/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\n\nexport const Filter = () => {\n  const userQueryFilter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const searchInputId = nanoid();\n\n  const handleFilterChange = e => {\n    const userQuery = e.target.value;\n    dispatch(setFilterValue(userQuery));\n  };\n\n  return (\n    <div className={css.filtercontainer}>\n      <label htmlFor={searchInputId}>Find contacts by name</label>\n      <input\n        type=\"text\"\n        id={searchInputId}\n        value={userQueryFilter}\n        onChange={handleFilterChange}\n      />\n    </div>\n  );\n};\n","import { ContactForm } from 'components/ContactsForm/ContactsForm';\nimport css from './ContactsPage.module.css';\nimport { ContactList } from 'components/ContactsList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\nexport const ContactsPage = () => {\n\n  return (\n    <div className={css.ContactsContainer}>\n      <h2>Contacts</h2>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["ContactForm","contacts","useSelector","selectUserContacts","nameInputId","nanoid","numberInputId","dispatch","useDispatch","onSubmit","e","preventDefault","form","currentTarget","name","elements","value","number","some","contact","toLocaleLowerCase","alert","addContactThunk","reset","className","css","htmlFor","type","title","id","required","selectEditContactData","newName","newNumber","editContactThunk","newContactData","setModalStatus","setEditContactData","defaultValue","ModalEditContact","useEffect","handleKeyDown","event","code","window","addEventListener","removeEventListener","onClick","target","Contact","isModalOpen","selectModalStatus","deleteContactThunk","ContactList","authintificated","selectAuthentificated","isLoading","selectContactsIsLoading","error","selectContactsError","requestContactsThunk","filter","selectFilter","showContacts","Array","isArray","length","Loader","normalizedFilter","includes","getFilteredContacts","map","Filter","userQueryFilter","searchInputId","onChange","userQuery","setFilterValue","ContactsPage"],"sourceRoot":""}
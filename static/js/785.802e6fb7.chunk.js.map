{"version":3,"file":"static/js/785.802e6fb7.chunk.js","mappings":"kOACA,GAAgB,UAAY,gCAAgC,WAAa,iCAAiC,UAAY,gCAAgC,OAAS,8B,0BCIlJA,EAAe,WACxB,IAAMC,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MAElBG,GAAWC,EAAAA,EAAAA,MAkBjB,OACA,gBAAKC,UAAWC,EAAAA,sBAAhB,UAEA,kBAAMC,SAnBe,SAACC,GACpBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACTC,EAAOF,EAAKG,SAASD,KAAKE,MAC1BC,EAAQL,EAAKG,SAASE,MAAMD,MAC5BE,EAAWN,EAAKG,SAASG,SAASF,MAExCX,GACEc,EAAAA,EAAAA,IAAkB,CAChBL,KAAAA,EACAG,MAAAA,EACAC,SAAAA,IAGL,EAK8BX,UAAWC,EAAAA,UAA1C,WACE,kBAAOY,QAASnB,EAAaM,UAAWC,EAAAA,UAAxC,SAAuD,UAGvD,kBACEa,KAAK,OACLP,KAAK,OACLP,UAAWC,EAAAA,WACXc,MAAM,yIACNC,GAAItB,EACJuB,UAAQ,KAGV,kBAAOJ,QAASjB,EAAcI,UAAWC,EAAAA,UAAzC,SAAwD,WAGxD,kBACEa,KAAK,QACLP,KAAK,QACLP,UAAWC,EAAAA,WACXc,MAAM,iCACNC,GAAIpB,EACJqB,UAAQ,KAGhB,kBAAOJ,QAAShB,EAAiBG,UAAWC,EAAAA,UAA5C,SAA2D,cAGrD,kBACEa,KAAK,WACLP,KAAK,WACLP,UAAWC,EAAAA,WACXc,MAAM,iCACNC,GAAInB,EACJoB,UAAQ,KAGV,mBAAQH,KAAK,SAASd,UAAWC,EAAAA,OAAjC,SAA6C,2BAMjD,ECzEF,EAAoC,wCCEvBiB,EAAe,WACxB,OAAO,iBAAKlB,UAAWC,EAAhB,WACH,wBAAI,yBACJ,SAACR,EAAD,MAGP,EAED,G,uDCVO,IAkBIE,EAAS,eAACwB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACP,EAAIQ,GAWvD,OARER,IAFFQ,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://react-homework-template/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","webpack://react-homework-template/./src/Pages/Register/RegisterPage.module.css?902d","Pages/Register/RegisterPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formstyle\":\"RegisterForm_formstyle__ZOzI7\",\"inputstyle\":\"RegisterForm_inputstyle__Q8e5-\",\"inputname\":\"RegisterForm_inputname__PKihV\",\"button\":\"RegisterForm_button__B3hFq\"};","import { useDispatch } from 'react-redux';\nimport css from './RegisterForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { registerUserThunk } from 'redux/operations';\n\nexport const RegisterForm = () => {\n    const nameInputId = nanoid();\n    const emailInputId = nanoid();\n    const passwordInputId = nanoid();\n\n    const dispatch = useDispatch();\n\n    const handleSubmit = (e) => {\n      e.preventDefault();\n      const form = e.currentTarget;\n      const name = form.elements.name.value;\n      const email = form.elements.email.value;\n      const password = form.elements.password.value;\n\n      dispatch(\n        registerUserThunk({\n          name,\n          email,\n          password,\n        })\n      )\n    }\n\n    return (\n    <div className={css.registerFormContainer}>\n\n    <form onSubmit={handleSubmit}  className={css.formstyle}>\n      <label htmlFor={nameInputId} className={css.inputname}>\n        Name\n      </label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        className={css.inputstyle}\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        id={nameInputId}\n        required\n      />\n\n      <label htmlFor={emailInputId} className={css.inputname}>\n        Email\n      </label>\n      <input\n        type=\"email\"\n        name=\"email\"\n        className={css.inputstyle}\n        title=\"Valid email should be provided\"\n        id={emailInputId}\n        required\n      />\n\n<label htmlFor={passwordInputId} className={css.inputname}>\n        Password\n      </label>\n      <input\n        type=\"password\"\n        name=\"password\"\n        className={css.inputstyle}\n        title=\"Valid email should be provided\"\n        id={passwordInputId}\n        required\n      />\n\n      <button type=\"submit\" className={css.button}>\n        Create My Account!\n      </button>\n    </form>\n        \n    </div>\n)}\n\nexport default RegisterForm;","// extracted by mini-css-extract-plugin\nexport default {\"registerContainer\":\"RegisterPage_registerContainer__B0EMZ\"};","import { RegisterForm } from 'components/RegisterForm/RegisterForm'\nimport css from './RegisterPage.module.css'\n\nexport const RegisterPage = () => {\n    return <div className={css.registerContainer}>\n        <h2>Create Your Account</h2>\n        <RegisterForm />\n        \n    </div>\n}\n\nexport default RegisterPage;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["RegisterForm","nameInputId","nanoid","emailInputId","passwordInputId","dispatch","useDispatch","className","css","onSubmit","e","preventDefault","form","currentTarget","name","elements","value","email","password","registerUserThunk","htmlFor","type","title","id","required","RegisterPage","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}
{"version":3,"file":"static/js/362.ed2a530e.chunk.js","mappings":"kNACA,OAAgB,UAAY,6BAA6B,WAAa,8BAA8B,UAAY,6BAA6B,OAAS,2B,kBCEzIA,EAAY,WACrB,IAAMC,GAAeC,EAAAA,EAAAA,MACfC,GAAkBD,EAAAA,EAAAA,MAcxB,OACA,gBAAKE,UAAWC,EAAAA,sBAAhB,UAEA,kBAAMC,SAfe,SAACC,GACpBA,EAAEC,gBASH,EAK6BJ,UAAWC,EAAAA,UAAzC,WAEE,kBAAOI,QAASR,EAAcG,UAAWC,EAAAA,UAAzC,SAAwD,WAGxD,kBACEK,KAAK,QACLC,KAAK,QACLP,UAAWC,EAAAA,WACXO,MAAM,iCACNC,GAAIZ,EACJa,UAAQ,KAGhB,kBAAOL,QAASN,EAAiBC,UAAWC,EAAAA,UAA5C,SAA2D,cAGrD,kBACEK,KAAK,OACLC,KAAK,WACLP,UAAWC,EAAAA,WACXO,MAAM,iCACNC,GAAIV,EACJW,UAAQ,KAGV,mBAAQJ,KAAK,SAASN,UAAWC,EAAAA,OAAjC,SAA6C,gBAMjD,ECrDF,EAAiC,kCCEpBU,EAAY,WACrB,OAAO,iBAAKX,UAAWC,EAAhB,WACH,wBAAI,WACJ,SAACL,EAAD,MAEP,EAED,G,uDCTO,IAkBIE,EAAS,eAACc,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACP,EAAIQ,GAWvD,OARER,IAFFQ,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","webpack://react-homework-template/./src/Pages/Login/LoginPage.module.css?e0de","Pages/Login/LoginPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formstyle\":\"LoginForm_formstyle__+VlmY\",\"inputstyle\":\"LoginForm_inputstyle__-f0eg\",\"inputname\":\"LoginForm_inputname__FGgXS\",\"button\":\"LoginForm_button__LodJg\"};","import css from './LoginForm.module.css';\nimport { nanoid } from 'nanoid';\n\nexport const LoginForm = () => {\n    const emailInputId = nanoid();\n    const passwordInputId = nanoid();\n\n    const handleSubmit = (e) => {\n      e.preventDefault();\n      // const form = e.currentTarget;\n      // const email = form.elements.email.value;\n      // const password = form.elements.password.value;\n\n      // const finalUserData = {\n      //   email,\n      //   password,\n      // }\n    }\n\n    return (\n    <div className={css.registerFormContainer}>\n\n    <form onSubmit={handleSubmit} className={css.formstyle}>\n\n      <label htmlFor={emailInputId} className={css.inputname}>\n        Email\n      </label>\n      <input\n        type=\"email\"\n        name=\"email\"\n        className={css.inputstyle}\n        title=\"Valid email should be provided\"\n        id={emailInputId}\n        required\n      />\n\n<label htmlFor={passwordInputId} className={css.inputname}>\n        Password\n      </label>\n      <input\n        type=\"text\"\n        name=\"password\"\n        className={css.inputstyle}\n        title=\"Valid email should be provided\"\n        id={passwordInputId}\n        required\n      />\n\n      <button type=\"submit\" className={css.button}>\n        Log In!\n      </button>\n    </form>\n        \n    </div>\n)}\n\nexport default LoginForm;","// extracted by mini-css-extract-plugin\nexport default {\"loginContainer\":\"LoginPage_loginContainer__tn53j\"};","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport css from './LoginPage.module.css';\n\nexport const LoginPage = () => {\n    return <div className={css.loginContainer}>\n        <h2>Login</h2>\n        <LoginForm />\n    </div>\n}\n\nexport default LoginPage;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["LoginForm","emailInputId","nanoid","passwordInputId","className","css","onSubmit","e","preventDefault","htmlFor","type","name","title","id","required","LoginPage","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}
{"version":3,"file":"static/js/200.cc25f35d.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactsForm/ContactsForm.module.css?d5f2","components/ContactsForm/ContactsForm.jsx","webpack://react-homework-template/./src/Pages/Contacts/ContactsPage.module.css?10d9","components/ContactsList/ContactList.module.css","webpack://react-homework-template/./src/components/ContactsList/Contact.module.css?b81e","components/ContactsList/Contact.jsx","components/ContactsList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/EditContactForm/EditContactForm.module.css?43d2","components/EditContactForm/EditContactForm.jsx","webpack://react-homework-template/./src/components/ModalEditContact/ModalEditContact.module.css?e6a1","components/ModalEditContact/ModalEditContact.jsx","Pages/Contacts/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formstyle\":\"ContactsForm_formstyle__Yvl2D\",\"inputstyle\":\"ContactsForm_inputstyle__IEoPR\",\"inputname\":\"ContactsForm_inputname__oGNP1\",\"button\":\"ContactsForm_button__zuUB3\"};","import { useDispatch, useSelector } from 'react-redux';\nimport css from './ContactsForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { addContactThunk, selectUserContacts } from 'redux/contactsReducer';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectUserContacts);\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    if (\n      contacts.some(\n        contact => contact.name.toLocaleLowerCase() === name.toLocaleLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n    } else {\n      dispatch(addContactThunk({ name: name, number: number }));\n    }\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.formstyle}>\n      <label htmlFor={nameInputId} className={css.inputname}>\n        Name\n      </label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        className={css.inputstyle}\n        // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        id={nameInputId}\n        required\n      />\n\n      <label htmlFor={numberInputId} className={css.inputname}>\n        Number\n      </label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        className={css.inputstyle}\n        // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        id={numberInputId}\n        required\n      />\n\n      <button type=\"submit\" className={css.button}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"ContactsContainer\":\"ContactsPage_ContactsContainer__ZWs4T\"};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"contactcontainer\":\"Contact_contactcontainer__5tXxP\",\"info\":\"Contact_info__CShPG\",\"contactInfo\":\"Contact_contactInfo__DB2xI\",\"contactButtons\":\"Contact_contactButtons__0lRS4\",\"button\":\"Contact_button__YLSCl\"};","import PropTypes from 'prop-types';\nimport css from './Contact.module.css';\nimport { MdContactPhone } from 'react-icons/md';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContactThunk } from 'redux/contactsReducer';\nimport { setModalStatus } from 'redux/modalSlice';\n\nexport const Contact = ({ name, number, id }) => {\n  const dispatch = useDispatch(); \n\n  return (\n    <div className={css.contactcontainer}>\n      <div className={css.contactInfo}>\n        <MdContactPhone />\n        <p className={css.info}>\n          {name}: {number}\n        </p>\n      </div>\n      <div className={css.contactButtons}>\n      <button\n        type=\"button\"\n        onClick={() => dispatch(deleteContactThunk(id))}\n        className={css.button}\n      >\n        Delete\n      </button>\n      <button type=\"button\" onClick={()=>dispatch(setModalStatus(true))}\n      className={css.button}>\n      Edit  \n      </button>\n      </div>\n    </div>\n  );\n};\n\nContact.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n  id: PropTypes.string,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport css from './ContactList.module.css';\nimport {\n  requestContactsThunk,\n  selectContactsError,\n  selectContactsIsLoading,\n  selectUserContacts,\n} from 'redux/contactsReducer';\nimport { selectAuthentificated } from 'redux/authReducer';\nimport { useEffect } from 'react';\nimport Loader from 'components/Loader/Loader';\nimport { selectFilter } from 'redux/filterSlice';\nimport { Contact } from './Contact';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectUserContacts);\n  const authintificated = useSelector(selectAuthentificated);\n  const isLoading = useSelector(selectContactsIsLoading);\n  const error = useSelector(selectContactsError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!authintificated) return;\n\n    dispatch(requestContactsThunk());\n  }, [authintificated, dispatch]);\n\n  const filter = useSelector(selectFilter);\n\n  const getFilteredContacts = () => {\n    const normalizedFilter = filter.toLocaleLowerCase();\n    return contacts?.filter(contact =>\n      contact.name.toLocaleLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const showContacts = Array.isArray(contacts) && contacts.length > 0;\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error && <p>Error occured... Error is {error}</p>}\n\n      <ul className={css.liststyle}>\n        {showContacts &&\n          getFilteredContacts().map(({ id, name, number }) => (\n            <li key={id}>\n              <Contact name={name} number={number} id={id} />\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filtercontainer\":\"Filter_filtercontainer__t-IOk\"};","import css from './Filter.module.css';\nimport { setFilterValue, selectFilter } from 'redux/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\n\nexport const Filter = () => {\n  const userQueryFilter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const searchInputId = nanoid();\n\n  const handleFilterChange = e => {\n    const userQuery = e.target.value;\n    dispatch(setFilterValue(userQuery));\n  };\n\n  return (\n    <div className={css.filtercontainer}>\n      <label htmlFor={searchInputId}>Find contacts by name</label>\n      <input\n        type=\"text\"\n        id={searchInputId}\n        value={userQueryFilter}\n        onChange={handleFilterChange}\n      />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"formstyle\":\"EditContactForm_formstyle__9XZ9v\",\"inputstyle\":\"EditContactForm_inputstyle__DH66l\",\"inputname\":\"EditContactForm_inputname__kuY0g\",\"button\":\"EditContactForm_button__6oq3H\"};","import { useDispatch, useSelector } from 'react-redux';\nimport css from './EditContactForm.module.css'\nimport { nanoid } from 'nanoid';\nimport { addContactThunk, selectUserContacts } from 'redux/contactsReducer';\n\nexport const EditContactForm = () => {\n  const contacts = useSelector(selectUserContacts);\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    if (\n      contacts.some(\n        contact => contact.name.toLocaleLowerCase() === name.toLocaleLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n    } else {\n      dispatch(addContactThunk({ name: name, number: number }));\n    }\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.formstyle}>\n      <label htmlFor={nameInputId} className={css.inputname}>\n        Name\n      </label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        className={css.inputstyle}\n        // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        id={nameInputId}\n        required\n      />\n\n      <label htmlFor={numberInputId} className={css.inputname}>\n        Number\n      </label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        className={css.inputstyle}\n        // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        id={numberInputId}\n        required\n      />\n\n      <button type=\"submit\" className={css.button}>\n        Edit contact\n      </button>\n    </form>\n  );\n};\n\nexport default EditContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"backdrop\":\"ModalEditContact_backdrop__+40sC\",\"modal\":\"ModalEditContact_modal__ag524\",\"text\":\"ModalEditContact_text__aePtk\",\"closeButton\":\"ModalEditContact_closeButton__HXeLp\"};","import EditContactForm from 'components/EditContactForm/EditContactForm';\nimport css from './ModalEditContact.module.css';\nimport { useDispatch } from 'react-redux';\nimport { setModalStatus } from 'redux/modalSlice';\nimport { useEffect } from 'react';\n\nexport const ModalEditContact = () => {\n\n    const handleOverlayClick = event => {\n        if (event.currentTarget === event.target) {\n            dispatch(setModalStatus(false));\n        }\n      };\n    \n      useEffect(() => {\n        const handleKeyDown = event => {\n          if (event.code === 'Escape') {\n            dispatch(setModalStatus(false));\n          }\n        };\n    \n        window.addEventListener('keydown', handleKeyDown);\n        return () => {\n          window.removeEventListener('keydown', handleKeyDown);\n        };\n      });\n    const dispatch = useDispatch();\n    return <div className={css.backdrop} onClick={handleOverlayClick}>\n        <div className={css.modal}>\n            <p className={css.text}>Edit your contact: </p>\n            <button className={css.closeButton} onClick={()=>dispatch(setModalStatus(false))}>&times;</button>\n            <EditContactForm />\n        </div>\n    </div>\n}\n\nexport default ModalEditContact;","import { ContactForm } from 'components/ContactsForm/ContactsForm';\nimport css from './ContactsPage.module.css';\nimport { ContactList } from 'components/ContactsList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport {ModalEditContact} from 'components/ModalEditContact/ModalEditContact';\nimport { useSelector } from 'react-redux';\nimport { selectModalStatus } from 'redux/modalSlice';\n\nexport const ContactsPage = () => {\n  const isModalOpen = useSelector(selectModalStatus)\n\n  return (\n    <div className={css.ContactsContainer}>\n      <h2>Contacts</h2>\n      <ContactForm />\n      {/* <ModalEditContact /> */}\n      {isModalOpen && <ModalEditContact />}\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["ContactForm","contacts","useSelector","selectUserContacts","nameInputId","nanoid","numberInputId","dispatch","useDispatch","onSubmit","e","preventDefault","form","currentTarget","name","elements","value","number","some","contact","toLocaleLowerCase","alert","addContactThunk","reset","className","css","htmlFor","type","title","id","required","Contact","onClick","deleteContactThunk","setModalStatus","ContactList","authintificated","selectAuthentificated","isLoading","selectContactsIsLoading","error","selectContactsError","useEffect","requestContactsThunk","filter","selectFilter","showContacts","Array","isArray","length","Loader","normalizedFilter","includes","getFilteredContacts","map","Filter","userQueryFilter","searchInputId","onChange","userQuery","target","setFilterValue","ModalEditContact","handleKeyDown","event","code","window","addEventListener","removeEventListener","ContactsPage","isModalOpen","selectModalStatus"],"sourceRoot":""}
{"version":3,"file":"static/js/680.a15235ae.chunk.js","mappings":"qNACA,MAA4B,gCAA5B,EAAyE,iCAAzE,EAAsH,gCAAtH,EAA+J,6B,kBCElJA,EAAc,WAEvB,IAAMC,GAAcC,EAAAA,EAAAA,MACdC,GAAgBD,EAAAA,EAAAA,MACtB,OAEA,kBAAME,UAAWC,EAAjB,WACE,kBAAOC,QAASL,EAAaG,UAAWC,EAAxC,SAAuD,UAGvD,kBACEE,KAAK,OACLC,KAAK,OACLJ,UAAWC,EAEXI,MAAM,yIACNC,GAAIT,EACJU,UAAQ,KAGV,kBAAOL,QAASH,EAAeC,UAAWC,EAA1C,SAAyD,YAGzD,kBACEE,KAAK,MACLC,KAAK,SACLJ,UAAWC,EAEXI,MAAM,+FACNC,GAAIP,EACJQ,UAAQ,KAGV,mBAAQJ,KAAK,SAASH,UAAWC,EAAjC,SAA6C,kBAK9C,ECxCL,EAAoC,wCCEvBO,EAAe,WACxB,OAAO,iBAAKR,UAAWC,EAAhB,WACH,wBAAI,cACJ,SAACL,EAAD,MAEP,EAED,G,uDCTO,IAkBIE,EAAS,eAACW,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACP,EAAIQ,GAWvD,OARER,IAFFQ,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://react-homework-template/./src/components/ContactsForm/ContactsForm.module.css?d5f2","components/ContactsForm/ContactsForm.jsx","webpack://react-homework-template/./src/Pages/Contacts/ContactsPage.module.css?10d9","Pages/Contacts/ContactsPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formstyle\":\"ContactsForm_formstyle__Yvl2D\",\"inputstyle\":\"ContactsForm_inputstyle__IEoPR\",\"inputname\":\"ContactsForm_inputname__oGNP1\",\"button\":\"ContactsForm_button__zuUB3\"};","import css from './ContactsForm.module.css';\nimport { nanoid } from 'nanoid';\n\nexport const ContactForm = () => {\n\n    const nameInputId = nanoid();\n    const numberInputId = nanoid();\n    return (\n\n    <form className={css.formstyle}>\n      <label htmlFor={nameInputId} className={css.inputname}>\n        Name\n      </label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        className={css.inputstyle}\n        // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        id={nameInputId}\n        required\n      />\n\n      <label htmlFor={numberInputId} className={css.inputname}>\n        Number\n      </label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        className={css.inputstyle}\n        // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        id={numberInputId}\n        required\n      />\n\n      <button type=\"submit\" className={css.button}>\n        Add contact\n      </button>\n    </form>\n  );\n    }\n\n    export default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"ContactsContainer\":\"ContactsPage_ContactsContainer__ZWs4T\"};","import { ContactForm } from 'components/ContactsForm/ContactsForm'\nimport css from './ContactsPage.module.css'\n\nexport const ContactsPage = () => {\n    return <div className={css.ContactsContainer}>\n        <h2>Contacts</h2>\n        <ContactForm />\n    </div>\n}\n\nexport default ContactsPage;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ContactForm","nameInputId","nanoid","numberInputId","className","css","htmlFor","type","name","title","id","required","ContactsPage","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}